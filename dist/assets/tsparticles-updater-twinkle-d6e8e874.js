import{O as t,J as e,G as i,F as o,p as s,v as n}from"./tsparticles-engine-3b45a3b7.js";class a{constructor(){this.enable=!1,this.frequency=.05,this.opacity=1}load(i){i&&(void 0!==i.color&&(this.color=t.create(this.color,i.color)),void 0!==i.enable&&(this.enable=i.enable),void 0!==i.frequency&&(this.frequency=i.frequency),void 0!==i.opacity&&(this.opacity=e(i.opacity)))}}class l{constructor(){this.lines=new a,this.particles=new a}load(t){t&&(this.lines.load(t.lines),this.particles.load(t.particles))}}class c{getColorStyles(t,e,a,l){const c=t.options.twinkle;if(!c)return{};const r=c.particles,d=r.enable&&i()<r.frequency,p=t.options.zIndex,u=(1-t.zIndexFactor)**p.opacityRate,y=d?o(r.opacity)*u:l,h=s(r.color),w=h?n(h,y):void 0,f={},v=d&&w;return f.fill=v?w:void 0,f.stroke=v?w:void 0,f}init(){}isEnabled(t){const e=t.options.twinkle;return!!e&&e.particles.enable}loadOptions(t,...e){t.twinkle||(t.twinkle=new l);for(const i of e)t.twinkle.load(null==i?void 0:i.twinkle)}update(){}}async function r(t){await t.addParticleUpdater("twinkle",(()=>new c))}export{r as l};
