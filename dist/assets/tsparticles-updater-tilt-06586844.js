import{J as t,I as i,F as e,G as n}from"./tsparticles-engine-3b45a3b7.js";class l{constructor(){this.enable=!1,this.speed=0,this.decay=0,this.sync=!1}load(i){i&&(void 0!==i.enable&&(this.enable=i.enable),void 0!==i.speed&&(this.speed=t(i.speed)),void 0!==i.decay&&(this.decay=t(i.decay)),void 0!==i.sync&&(this.sync=i.sync))}}class a extends i{constructor(){super(),this.animation=new l,this.direction="clockwise",this.enable=!1,this.value=0}load(t){super.load(t),t&&(this.animation.load(t.animation),void 0!==t.direction&&(this.direction=t.direction),void 0!==t.enable&&(this.enable=t.enable))}}class o{constructor(t){this.container=t}getTransformValues(t){var i;const e=(null===(i=t.tilt)||void 0===i?void 0:i.enable)&&t.tilt;return{b:e?Math.cos(e.value)*e.cosDirection:void 0,c:e?Math.sin(e.value)*e.sinDirection:void 0}}init(t){var i;const l=t.options.tilt;if(!l)return;t.tilt={enable:l.enable,value:e(l.value)*Math.PI/180,sinDirection:n()>=.5?1:-1,cosDirection:n()>=.5?1:-1};let a=l.direction;if("random"===a){a=Math.floor(2*n())>0?"counter-clockwise":"clockwise"}switch(a){case"counter-clockwise":case"counterClockwise":t.tilt.status="decreasing";break;case"clockwise":t.tilt.status="increasing"}const o=null===(i=t.options.tilt)||void 0===i?void 0:i.animation;(null==o?void 0:o.enable)&&(t.tilt.decay=1-e(o.decay),t.tilt.velocity=e(o.speed)/360*this.container.retina.reduceFactor,o.sync||(t.tilt.velocity*=n()))}isEnabled(t){var i;const e=null===(i=t.options.tilt)||void 0===i?void 0:i.animation;return!t.destroyed&&!t.spawning&&!!(null==e?void 0:e.enable)}loadOptions(t,...i){t.tilt||(t.tilt=new a);for(const e of i)t.tilt.load(null==e?void 0:e.tilt)}update(t,i){this.isEnabled(t)&&function(t,i){var e,n;if(!t.tilt||!t.options.tilt)return;const l=t.options.tilt.animation,a=(null!==(e=t.tilt.velocity)&&void 0!==e?e:0)*i.factor,o=2*Math.PI,s=null!==(n=t.tilt.decay)&&void 0!==n?n:1;l.enable&&("increasing"===t.tilt.status?(t.tilt.value+=a,t.tilt.value>o&&(t.tilt.value-=o)):(t.tilt.value-=a,t.tilt.value<0&&(t.tilt.value+=o)),t.tilt.velocity&&1!==s&&(t.tilt.velocity*=s))}(t,i)}}async function s(t){await t.addParticleUpdater("tilt",(t=>new o(t)))}export{s as l};
